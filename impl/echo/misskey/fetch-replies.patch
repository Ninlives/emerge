diff --git a/packages/backend/src/core/activitypub/ApResolverService.ts b/packages/backend/src/core/activitypub/ApResolverService.ts
index aa4720c56..8a1bf0a28 100644
--- a/packages/backend/src/core/activitypub/ApResolverService.ts
+++ b/packages/backend/src/core/activitypub/ApResolverService.ts
@@ -10,7 +10,8 @@ import { UtilityService } from '@/core/UtilityService.js';
 import { bindThis } from '@/decorators.js';
 import { LoggerService } from '@/core/LoggerService.js';
 import type Logger from '@/logger.js';
-import { isCollectionOrOrderedCollection } from './type.js';
+import { isCollectionOrOrderedCollection, isCollection, isOrderedCollection } from './type.js';
+import { isCollectionOrOrderedCollectionPage, isCollectionPage } from './type.js';
 import { ApDbResolverService } from './ApDbResolverService.js';
 import { ApRendererService } from './ApRendererService.js';
 import { ApRequestService } from './ApRequestService.js';
@@ -52,11 +53,47 @@ export class Resolver {
 			? await this.resolve(value)
 			: value;
 
-		if (isCollectionOrOrderedCollection(collection)) {
-			return collection;
+		let resolvedCollection;
+		if (isCollection(collection)) {
+			resolvedCollection = {
+				type: 'Collection',
+				id: collection.id,
+				totalItems: 0,
+				items: [],
+			};
+		} else if (isOrderedCollection(collection)) {
+			resolvedCollection = {
+				type: 'OrderedCollection',
+				id: collection.id,
+				totalItems: 0,
+				orderedItems: [],
+			};
 		} else {
 			throw new Error(`unrecognized collection type: ${collection.type}`);
 		}
+
+		const items = (isCollection(collection) ? collection.items : collection.orderedItems) ?? [];
+		const pagedItems = collection.first ? await this.combineCollectionPage(collection.first) : [];
+		const combinedItems = items.concat(pagedItems);
+		if (isCollection(collection)) {
+			resolvedCollection.items = combinedItems;
+		} else {
+			resolvedCollection.orderedItems = combinedItems;
+		}
+		resolvedCollection.totalItems = combinedItems.length;
+		return resolvedCollection;
+	}
+
+	@bindThis
+	private async combineCollectionPage(page: string | ICollectionPage | IOrderedCollectionPage): Promise<(IObject | string)[]> {
+		const resolvedPage = await this.resolve(page);
+		if (!isCollectionOrOrderedCollectionPage(resolvedPage)) {
+			throw new Error(`not a CollectionPage`);
+		}
+
+		const items = (isCollectionPage(resolvedPage) ? resolvedPage.items : resolvedPage.orderedItems) ?? [];
+		const nextItems = resolvedPage.next ? await this.combineCollectionPage(resolvedPage.next) : [];
+		return items.concat(nextItems);
 	}
 
 	@bindThis
diff --git a/packages/backend/src/core/activitypub/type.ts b/packages/backend/src/core/activitypub/type.ts
index 4bb0fa61e..7e38d0d52 100644
--- a/packages/backend/src/core/activitypub/type.ts
+++ b/packages/backend/src/core/activitypub/type.ts
@@ -89,14 +89,24 @@ export interface IActivity extends IObject {
 
 export interface ICollection extends IObject {
 	type: 'Collection';
-	totalItems: number;
-	items: ApObject;
+	totalItems?: number;
+	items?: ApObject;
+	first?: ICollectionPage;
 }
 
-export interface IOrderedCollection extends IObject {
+export interface ICollectionPage extends ICollection {
+	type: 'CollectionPage';
+	next?: ICollectionPage | string;
+}
+
+export interface IOrderedCollection extends ICollection {
 	type: 'OrderedCollection';
-	totalItems: number;
-	orderedItems: ApObject;
+	orderedItems?: ApObject;
+}
+
+export interface IOrderedCollectionPage extends IOrderedCollection {
+	type: 'OrderedCollectionPage';
+	next?: IOrderedCollectionPage | string;
 }
 
 export const validPost = ['Note', 'Question', 'Article', 'Audio', 'Document', 'Image', 'Page', 'Video', 'Event'];
@@ -186,6 +196,15 @@ export const isOrderedCollection = (object: IObject): object is IOrderedCollecti
 export const isCollectionOrOrderedCollection = (object: IObject): object is ICollection | IOrderedCollection =>
 	isCollection(object) || isOrderedCollection(object);
 
+export const isCollectionPage = (object: IObject): object is ICollectionPage =>
+	getApType(object) === "CollectionPage";
+
+export const isOrderedCollectionPage = (object: IObject): object is IOrderedCollectionPage =>
+	getApType(object) === "OrderedCollectionPage";
+
+export const isCollectionOrOrderedCollectionPage = (object: IObject): object is ICollectionPage | IOrderedCollectionPage =>
+	isCollectionPage(object) || isOrderedCollectionPage(object);
+
 export interface IApPropertyValue extends IObject {
 	type: 'PropertyValue';
 	identifier: IApPropertyValue;
diff --git a/packages/backend/src/server/api/EndpointsModule.ts b/packages/backend/src/server/api/EndpointsModule.ts
index 4e6bc46e6..d2805b9a7 100644
--- a/packages/backend/src/server/api/EndpointsModule.ts
+++ b/packages/backend/src/server/api/EndpointsModule.ts
@@ -276,6 +276,7 @@ import * as ep___notes_timeline from './endpoints/notes/timeline.js';
 import * as ep___notes_translate from './endpoints/notes/translate.js';
 import * as ep___notes_unrenote from './endpoints/notes/unrenote.js';
 import * as ep___notes_userListTimeline from './endpoints/notes/user-list-timeline.js';
+import * as ep___notes_fetchReplies from './endpoints/notes/fetch-replies.js';
 import * as ep___notifications_create from './endpoints/notifications/create.js';
 import * as ep___notifications_markAllAsRead from './endpoints/notifications/mark-all-as-read.js';
 import * as ep___pagePush from './endpoints/page-push.js';
@@ -621,6 +622,7 @@ const $notes_timeline: Provider = { provide: 'ep:notes/timeline', useClass: ep__
 const $notes_translate: Provider = { provide: 'ep:notes/translate', useClass: ep___notes_translate.default };
 const $notes_unrenote: Provider = { provide: 'ep:notes/unrenote', useClass: ep___notes_unrenote.default };
 const $notes_userListTimeline: Provider = { provide: 'ep:notes/user-list-timeline', useClass: ep___notes_userListTimeline.default };
+const $notes_fetchReplies: Provider = { provide: 'ep:notes/fetch-replies', useClass: ep___notes_fetchReplies.default };
 const $notifications_create: Provider = { provide: 'ep:notifications/create', useClass: ep___notifications_create.default };
 const $notifications_markAllAsRead: Provider = { provide: 'ep:notifications/mark-all-as-read', useClass: ep___notifications_markAllAsRead.default };
 const $pagePush: Provider = { provide: 'ep:page-push', useClass: ep___pagePush.default };
@@ -970,6 +972,7 @@ const $retention: Provider = { provide: 'ep:retention', useClass: ep___retention
 		$notes_translate,
 		$notes_unrenote,
 		$notes_userListTimeline,
+		$notes_fetchReplies,
 		$notifications_create,
 		$notifications_markAllAsRead,
 		$pagePush,
diff --git a/packages/backend/src/server/api/endpoints.ts b/packages/backend/src/server/api/endpoints.ts
index 41c3a29ee..9dc61396f 100644
--- a/packages/backend/src/server/api/endpoints.ts
+++ b/packages/backend/src/server/api/endpoints.ts
@@ -276,6 +276,7 @@ import * as ep___notes_timeline from './endpoints/notes/timeline.js';
 import * as ep___notes_translate from './endpoints/notes/translate.js';
 import * as ep___notes_unrenote from './endpoints/notes/unrenote.js';
 import * as ep___notes_userListTimeline from './endpoints/notes/user-list-timeline.js';
+import * as ep___notes_fetchReplies from './endpoints/notes/fetch-replies.js';
 import * as ep___notifications_create from './endpoints/notifications/create.js';
 import * as ep___notifications_markAllAsRead from './endpoints/notifications/mark-all-as-read.js';
 import * as ep___pagePush from './endpoints/page-push.js';
@@ -619,6 +620,7 @@ const eps = [
 	['notes/translate', ep___notes_translate],
 	['notes/unrenote', ep___notes_unrenote],
 	['notes/user-list-timeline', ep___notes_userListTimeline],
+	['notes/fetch-replies', ep___notes_fetchReplies],
 	['notifications/create', ep___notifications_create],
 	['notifications/mark-all-as-read', ep___notifications_markAllAsRead],
 	['page-push', ep___pagePush],
diff --git a/packages/backend/src/server/api/endpoints/notes/fetch-replies.ts b/packages/backend/src/server/api/endpoints/notes/fetch-replies.ts
new file mode 100644
index 000000000..a644e01ef
--- /dev/null
+++ b/packages/backend/src/server/api/endpoints/notes/fetch-replies.ts
@@ -0,0 +1,115 @@
+import ms from 'ms';
+import { Injectable } from '@nestjs/common';
+import type { UsersRepository } from '@/models/index.js';
+import { Endpoint } from '@/server/api/endpoint-base.js';
+import { DI } from '@/di-symbols.js';
+import { GetterService } from '@/server/api/GetterService.js';
+import type Logger from '@/logger.js';
+import { ApLoggerService } from '@/core/activitypub/ApLoggerService.js';
+import { ApResolverService } from '@/core/activitypub/ApResolverService.js';
+import { ApNoteService } from '@/core/activitypub/models/ApNoteService.js';
+import { ApiError } from '../../error.js';
+import { isCollection, getApId } from '@/core/activitypub/type.js';
+
+export const meta = {
+	tags: ['notes'],
+
+	requireCredential: true,
+
+	limit: {
+		duration: ms('1hour'),
+		max: 300,
+		minInterval: ms('1sec'),
+	},
+
+	errors: {
+		noSuchNote: {
+			message: 'No such note.',
+			code: 'NO_SUCH_NOTE',
+			id: '2488f865-12a0-489a-bbe1-d6516417d928',
+		},
+	},
+} as const;
+
+export const paramDef = {
+	type: 'object',
+	properties: {
+		noteId: { type: 'string', format: 'misskey:id' },
+	},
+	required: ['noteId'],
+} as const;
+
+// eslint-disable-next-line import/no-default-export
+@Injectable()
+export default class extends Endpoint<typeof meta, typeof paramDef> {
+	constructor(
+		private getterService: GetterService,
+		private apResolverService: ApResolverService,
+		private apNoteService: ApNoteService,
+		private apLoggerService: ApLoggerService,
+	) {
+		super(meta, paramDef, async (ps, me) => {
+			const logger = this.apLoggerService.logger;
+			const note = await this.getterService.getNote(ps.noteId).catch(err => {
+				if (err.id === '9725d0ce-ba28-4dde-95a7-2cbb2c15de24') throw new ApiError(meta.errors.noSuchNote);
+				throw err;
+			});
+			if (note.uri === null) {
+				return;
+			}
+
+			try {
+				let resolveReplyLeaf = async (reply) => {
+					this.apNoteService.resolveNote(reply)
+					.then(x => {
+						if (x == null) {
+							logger.warn(`Reply ${getApId(reply)} not found.`);
+						} else {
+							logger.info(`Resolved ${getApId(reply)}.`);
+						}
+					})
+					.catch(async err => {
+						logger.warn(`Error in resolving ${getApId(reply)}: ${err}`);
+					})
+				};
+
+				let resolveReply = async (reply) => {
+					const resolver = this.apResolverService.createResolver();
+					let noteObj;
+					try {
+						noteObj = await resolver.resolve(reply);
+					} catch (err) {
+						logger.warn(`Error in resolving ${getApId(reply)}: ${err}`);
+						return;
+					}
+					if (noteObj.replies) {
+						let replies = [];
+						try {
+							const repliesObj = await resolver.resolveCollection(noteObj.replies);
+							replies = isCollection(repliesObj) ? repliesObj.items : repliesObj.orderedItems;
+						} catch (err) {
+							logger.warn(`Error in resolving replies of ${getApId(reply)}: ${err}`);
+						}
+						if (replies.length === 0) {
+							await resolveReplyLeaf(reply);
+						} else {
+							let tasks = [];
+							for (let reply of replies) {
+								tasks.push(resolveReply(reply));
+							}
+							await Promise.all(tasks);
+							logger.info(`Resolved ${getApId(reply)}.`);
+						}
+					} else {
+						await resolveReplyLeaf(reply);
+					}
+				}
+
+				await resolveReply(note.uri);
+
+			} catch (err) {
+				throw err;
+			}
+		});
+	}
+}
diff --git a/packages/frontend/src/components/MkNoteDetailed.vue b/packages/frontend/src/components/MkNoteDetailed.vue
index a40b9cd2b..c1287cd9b 100644
--- a/packages/frontend/src/components/MkNoteDetailed.vue
+++ b/packages/frontend/src/components/MkNoteDetailed.vue
@@ -115,6 +115,9 @@
 			<button v-if="defaultStore.state.showClipButtonInNoteFooter" ref="clipButton" class="_button" :class="$style.noteFooterButton" @mousedown="clip()">
 				<i class="ti ti-paperclip"></i>
 			</button>
+			<button ref="fetchButton" class="_button" :class="$style.noteFooterButton" @mousedown="fetchReplies()">
+				<i class="ti ti-reload"></i>
+			</button>
 			<button ref="menuButton" class="_button" :class="$style.noteFooterButton" @mousedown="menu()">
 				<i class="ti ti-dots"></i>
 			</button>
@@ -390,6 +393,27 @@ function menu(viaKeyboard = false): void {
 	}).then(focus);
 }
 
+function fetchReplies(): void {
+	os.promiseDialog(os.api('notes/fetch-replies', { noteId: appearNote.id, }),
+		() => {
+		 os.api('notes/children', {
+		 	noteId: appearNote.id,
+		 	limit: -1,
+		 }).then(res => {
+		 	replies.value = res;
+			appearNote.repliesCount = res.length;
+		 });
+		 os.success();
+		 focus();
+		},
+		async (err) => {
+		  os.alert({
+		 	 type: 'error',
+		 	 text: err,
+		  })
+		});
+}
+
 async function clip() {
 	os.popupMenu(await getNoteClipMenu({ note: note, isDeleted }), clipButton.value).then(focus);
 }
